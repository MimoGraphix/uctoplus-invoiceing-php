<?php
/**
 * IncommingInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  MimoGraphix\Uctoplus
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moje Účto+ API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: helpdesk@uctoplus.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MimoGraphix\Uctoplus\Models;

use \ArrayAccess;
use \MimoGraphix\Uctoplus\ObjectSerializer;

/**
 * IncommingInvoice Class Doc Comment
 *
 * @category Class
 * @package  MimoGraphix\Uctoplus
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncommingInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncommingInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_number' => 'string',
        'invoice_type' => '\MimoGraphix\Uctoplus\Models\InvoiceType',
        'description' => 'string',
        'sender' => '\MimoGraphix\Uctoplus\Models\Address',
        'variable_symbol' => 'string',
        'konstantny_symbol' => 'string',
        'specificky_symbol' => 'string',
        'date_issue' => 'string',
        'date_delivery' => 'string',
        'date_due' => 'string',
        'payment_flag' => 'bool',
        'payment_value' => 'float',
        'payment_date' => 'string',
        'price_without_vat' => 'float',
        'price_with_vat' => 'float',
        'currency' => 'string',
        'file' => '\MimoGraphix\Uctoplus\Models\File'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'invoice_number' => null,
        'invoice_type' => null,
        'description' => null,
        'sender' => null,
        'variable_symbol' => null,
        'konstantny_symbol' => null,
        'specificky_symbol' => null,
        'date_issue' => null,
        'date_delivery' => null,
        'date_due' => null,
        'payment_flag' => null,
        'payment_value' => null,
        'payment_date' => null,
        'price_without_vat' => null,
        'price_with_vat' => null,
        'currency' => null,
        'file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_number' => 'invoiceNumber',
        'invoice_type' => 'invoiceType',
        'description' => 'description',
        'sender' => 'sender',
        'variable_symbol' => 'variableSymbol',
        'konstantny_symbol' => 'konstantnySymbol',
        'specificky_symbol' => 'specifickySymbol',
        'date_issue' => 'dateIssue',
        'date_delivery' => 'dateDelivery',
        'date_due' => 'dateDue',
        'payment_flag' => 'paymentFlag',
        'payment_value' => 'paymentValue',
        'payment_date' => 'paymentDate',
        'price_without_vat' => 'priceWithoutVAT',
        'price_with_vat' => 'priceWithVAT',
        'currency' => 'currency',
        'file' => 'file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_number' => 'setInvoiceNumber',
        'invoice_type' => 'setInvoiceType',
        'description' => 'setDescription',
        'sender' => 'setSender',
        'variable_symbol' => 'setVariableSymbol',
        'konstantny_symbol' => 'setKonstantnySymbol',
        'specificky_symbol' => 'setSpecifickySymbol',
        'date_issue' => 'setDateIssue',
        'date_delivery' => 'setDateDelivery',
        'date_due' => 'setDateDue',
        'payment_flag' => 'setPaymentFlag',
        'payment_value' => 'setPaymentValue',
        'payment_date' => 'setPaymentDate',
        'price_without_vat' => 'setPriceWithoutVat',
        'price_with_vat' => 'setPriceWithVat',
        'currency' => 'setCurrency',
        'file' => 'setFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_number' => 'getInvoiceNumber',
        'invoice_type' => 'getInvoiceType',
        'description' => 'getDescription',
        'sender' => 'getSender',
        'variable_symbol' => 'getVariableSymbol',
        'konstantny_symbol' => 'getKonstantnySymbol',
        'specificky_symbol' => 'getSpecifickySymbol',
        'date_issue' => 'getDateIssue',
        'date_delivery' => 'getDateDelivery',
        'date_due' => 'getDateDue',
        'payment_flag' => 'getPaymentFlag',
        'payment_value' => 'getPaymentValue',
        'payment_date' => 'getPaymentDate',
        'price_without_vat' => 'getPriceWithoutVat',
        'price_with_vat' => 'getPriceWithVat',
        'currency' => 'getCurrency',
        'file' => 'getFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : 'null';
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['variable_symbol'] = isset($data['variable_symbol']) ? $data['variable_symbol'] : 'null';
        $this->container['konstantny_symbol'] = isset($data['konstantny_symbol']) ? $data['konstantny_symbol'] : 'null';
        $this->container['specificky_symbol'] = isset($data['specificky_symbol']) ? $data['specificky_symbol'] : 'null';
        $this->container['date_issue'] = isset($data['date_issue']) ? $data['date_issue'] : null;
        $this->container['date_delivery'] = isset($data['date_delivery']) ? $data['date_delivery'] : 'null';
        $this->container['date_due'] = isset($data['date_due']) ? $data['date_due'] : 'null';
        $this->container['payment_flag'] = isset($data['payment_flag']) ? $data['payment_flag'] : false;
        $this->container['payment_value'] = isset($data['payment_value']) ? $data['payment_value'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : 'null';
        $this->container['price_without_vat'] = isset($data['price_without_vat']) ? $data['price_without_vat'] : null;
        $this->container['price_with_vat'] = isset($data['price_with_vat']) ? $data['price_with_vat'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'EUR';
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['invoice_type'] === null) {
            $invalidProperties[] = "'invoice_type' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['date_issue'] === null) {
            $invalidProperties[] = "'date_issue' can't be null";
        }
        if ($this->container['price_without_vat'] === null) {
            $invalidProperties[] = "'price_without_vat' can't be null";
        }
        if ($this->container['price_with_vat'] === null) {
            $invalidProperties[] = "'price_with_vat' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \MimoGraphix\Uctoplus\Models\InvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \MimoGraphix\Uctoplus\Models\InvoiceType $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \MimoGraphix\Uctoplus\Models\Address
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \MimoGraphix\Uctoplus\Models\Address $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets variable_symbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variable_symbol'];
    }

    /**
     * Sets variable_symbol
     *
     * @param string|null $variable_symbol variable_symbol
     *
     * @return $this
     */
    public function setVariableSymbol($variable_symbol)
    {
        $this->container['variable_symbol'] = $variable_symbol;

        return $this;
    }

    /**
     * Gets konstantny_symbol
     *
     * @return string|null
     */
    public function getKonstantnySymbol()
    {
        return $this->container['konstantny_symbol'];
    }

    /**
     * Sets konstantny_symbol
     *
     * @param string|null $konstantny_symbol konstantny_symbol
     *
     * @return $this
     */
    public function setKonstantnySymbol($konstantny_symbol)
    {
        $this->container['konstantny_symbol'] = $konstantny_symbol;

        return $this;
    }

    /**
     * Gets specificky_symbol
     *
     * @return string|null
     */
    public function getSpecifickySymbol()
    {
        return $this->container['specificky_symbol'];
    }

    /**
     * Sets specificky_symbol
     *
     * @param string|null $specificky_symbol specificky_symbol
     *
     * @return $this
     */
    public function setSpecifickySymbol($specificky_symbol)
    {
        $this->container['specificky_symbol'] = $specificky_symbol;

        return $this;
    }

    /**
     * Gets date_issue
     *
     * @return string
     */
    public function getDateIssue()
    {
        return $this->container['date_issue'];
    }

    /**
     * Sets date_issue
     *
     * @param string $date_issue Date in format parsable by PHP DateTime
     *
     * @return $this
     */
    public function setDateIssue($date_issue)
    {
        $this->container['date_issue'] = $date_issue;

        return $this;
    }

    /**
     * Gets date_delivery
     *
     * @return string|null
     */
    public function getDateDelivery()
    {
        return $this->container['date_delivery'];
    }

    /**
     * Sets date_delivery
     *
     * @param string|null $date_delivery Date in format parsable by PHP DateTime
     *
     * @return $this
     */
    public function setDateDelivery($date_delivery)
    {
        $this->container['date_delivery'] = $date_delivery;

        return $this;
    }

    /**
     * Gets date_due
     *
     * @return string|null
     */
    public function getDateDue()
    {
        return $this->container['date_due'];
    }

    /**
     * Sets date_due
     *
     * @param string|null $date_due Date in format parsable by PHP DateTime
     *
     * @return $this
     */
    public function setDateDue($date_due)
    {
        $this->container['date_due'] = $date_due;

        return $this;
    }

    /**
     * Gets payment_flag
     *
     * @return bool|null
     */
    public function getPaymentFlag()
    {
        return $this->container['payment_flag'];
    }

    /**
     * Sets payment_flag
     *
     * @param bool|null $payment_flag payment_flag
     *
     * @return $this
     */
    public function setPaymentFlag($payment_flag)
    {
        $this->container['payment_flag'] = $payment_flag;

        return $this;
    }

    /**
     * Gets payment_value
     *
     * @return float|null
     */
    public function getPaymentValue()
    {
        return $this->container['payment_value'];
    }

    /**
     * Sets payment_value
     *
     * @param float|null $payment_value payment_value
     *
     * @return $this
     */
    public function setPaymentValue($payment_value)
    {
        $this->container['payment_value'] = $payment_value;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return string|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param string|null $payment_date Date in format parsable by PHP DateTime
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets price_without_vat
     *
     * @return float
     */
    public function getPriceWithoutVat()
    {
        return $this->container['price_without_vat'];
    }

    /**
     * Sets price_without_vat
     *
     * @param float $price_without_vat price_without_vat
     *
     * @return $this
     */
    public function setPriceWithoutVat($price_without_vat)
    {
        $this->container['price_without_vat'] = $price_without_vat;

        return $this;
    }

    /**
     * Gets price_with_vat
     *
     * @return float
     */
    public function getPriceWithVat()
    {
        return $this->container['price_with_vat'];
    }

    /**
     * Sets price_with_vat
     *
     * @param float $price_with_vat price_with_vat
     *
     * @return $this
     */
    public function setPriceWithVat($price_with_vat)
    {
        $this->container['price_with_vat'] = $price_with_vat;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency 3 letter code of Currency eg. EUR, GBP, CZK, ...
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \MimoGraphix\Uctoplus\Models\File|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \MimoGraphix\Uctoplus\Models\File|null $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


